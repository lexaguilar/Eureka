@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)
@{
    string[] PropertiesExcept = { "EstadoId", "CreadoPor", "CreadoEl", "ModificadoPor", "ModificadoEl" };
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var modelProperties = new List<string>();
    var hasId = false;
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
            if(property.PropertyName == primaryKeyName)
            {
                hasId = true;
            }
        }
    }
    var bindString = string.Join(",", modelProperties);

    var bindStringCustom = string.Join(",", modelProperties.Where(z => !PropertiesExcept.Contains(z)));

    var controller = @GetPostfijo(Model.ViewDataTypeShortName.ToLower());

    string edicionesEditar = @"{
                        width : 100,       
                        caption: '',
                        dataField: '" + @primaryKeyName + @"',                               
                        cellTemplate: function (container, options) {
                            $('<div>')
                                .append(`<a class='btn btn-xs btn-mint' href='${pathBase}" + controller + @"/edit/${options.value}'><span class='ion-edit'></span> Editar</a>`) 
                                .appendTo(container);
                           }
                        }";

    string edicionesEliminar = @",{
                        width : 100,       
                        caption: '',
                        dataField: 'Id',                               
                        cellTemplate: function (container, options) {
                            $('<div>')
                                .append(`<a class='btn btn-xs btn-default' href='${pathBase}" + controller + @"/details/${options.value}'><span class='ion-android-list text-info'></span> Detalle</a>`) 
                                .appendTo(container);
                           }
                        }";
}
    
@{
  

}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
    string GetPostfijo(string s)
    {
        string[] vocales = { "a", "e", "i", "o", "u" };

        if (vocales.Contains(s.Last().ToString()))
            return $"{s}s";
        else if(s.Last().ToString() == "s")
            return $"{s}";
        else
            return $"{s}es";


    }
}