@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    string[] PropertiesExcept = {"CreadoPor", "CreadoEl", "ModificadoPor", "ModificadoEl" };
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "Editar @Model.ViewDataTypeShortName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:@@section Styles
@:{
   @:@@await Html.PartialAsync("_CssCRUD")
@:}
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
    @:
    //    PushIndent("    ");
}
@:@@{
@:string[] info = { "@GetPostfijo(Model.ViewDataTypeShortName)", "editar" };
@:}
@:@@await Html.PartialAsync("_Breadcrumb", info)
    
 string pkName = GetPrimaryKeyName();

   @:<div class="col-md-4 col-md-offset-4">
    @:<div class="panel panel-mint" id="panel-updatable">
        @:<div class="panel-heading">
            @:<div class="panel-control">
                @:<ul class="pager pager-rounded">
                    @:<li><a asp-action="delete" class="btn btn-danger btn-rounded" asp-route-id="@@Model.@pkName"><i class="ion-close ion-14px"></i> Eliminar @Model.ViewDataTypeShortName</a></li>
                    @:<li><a asp-action="details" class="btn btn-info" asp-route-id="@@Model.@pkName"><span class="ion-android-list"></span> Detalles</a></li>
                @:</ul>
            @:</div>
            @:<h3 class="panel-title">Editar @Model.ViewDataTypeShortName</h3>
        @:</div>
        @:<div class="panel-body">
            @:<div class="row">
                foreach (var property in Model.ModelMetadata.Properties)
                {
                    if (property.IsPrimaryKey)
                    {
                        @:<input type="hidden" asp-for="@property.PropertyName" />
                        continue;
                    }
                    if (property.Scaffold)
                    {
                        if (property.IsReadOnly)
                        {
                            continue;
                        }
                        if (PropertiesExcept.Contains((string)property.PropertyName))
                        {
                            continue;
                        }
                        if (property.IsForeignKey)
                        {
                            @:<div class="col-md-12 form-group">
                                @:<label asp-for="@property.PropertyName" class="col-md-4 font-16">@@Html.DisplayNameFor(model => model.@GetValueExpression(property)) :</label>
                                @:<div class="col-lg-8">
                                    @:<select asp-for="@property.PropertyName" class="eu-selectize" asp-items="ViewBag.@property.PropertyName"><option value="">Seleccione</option></select>
                                @:</div>
                            @:</div>
                            continue;
                        }

                        bool isCheckbox = property.TypeName.Equals("System.Boolean");
                        bool isDatetime = property.TypeName.Equals("System.DateTime");
                        if (isCheckbox)
                        {
                            @:<div class="col-md-12 form-group">
                                @:<div class="checkbox">
                                    @:<label>
                                        @:<input asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                    @:</label>
                                @:</div>
                            @:</div>
                        }
                        else if (property.IsEnum && !property.IsEnumFlags)
                        {
                            @:<div class="col-md-12 form-group">
                                @:<label asp-for="@property.PropertyName" class="col-md-4 font-16">@@Html.DisplayNameFor(model => model.@GetValueExpression(property)) :</label>
                                @:<div class="col-lg-8">
                                    @:<select asp-for="@property.PropertyName" class="form-control font-16"></select>
                                @:</div>
                            @:</div>
                        }
                        else
                        {
                            if (isDatetime)
                            {
                                @:<div class="col-md-12 form-group">
                                    @:<label asp-for="@property.PropertyName" class="col-md-4 font-16">@@Html.DisplayNameFor(model => model.@GetValueExpression(property)) :</label>
                                    @:<div class="col-lg-8">
                                        @:<input asp-for="@property.PropertyName" class="form-control validate datepicker font-16" />
                                    @:</div>
                                @:</div>
                            }
                            else
                            {
                                @:<div class="col-md-12 form-group">
                                    @:<label asp-for="@property.PropertyName" class="col-md-4 font-16">@@Html.DisplayNameFor(model => model.@GetValueExpression(property)) :</label>
                                    @:<div class="col-lg-8">
                                        @:<a href="#" id="@property.PropertyName" class="eu-editable validate font-16">@@Model.@property.PropertyName</a>
                                    @:</div>
                                @:</div>
                            }
                        }

                    }
                }
            @:</div>
            @:<div class="form-group demo-nifty-btn">
                @:<button id="btnGuardar" type="button" class="btn btn-mint btn-block"><i class="ion-checkmark ion-14px"></i> Actualizar</button>
            @:</div>
            <hr class="new-section-sm">
            @:<a class="btn btn-sm btn-default" asp-action="index"><i class="ion-arrow-left-b ion-14px"></i> Regresar al listado</a>
            
        @:</div>
    @:</div>
@:</div>
}
@{
    if (Model.ReferenceScriptLibraries)
    {
        @:@@section Scripts {
        @:@@await Html.PartialAsync("_ScriptsCRUD")
        @:@@await Html.PartialAsync("_ScriptsCU", "@Model.ViewDataTypeShortName.ToLower()")
        @:<environment include="Development">
            @:<script src="~/js/models/@{@Model.ViewDataTypeShortName.ToLower()}.model.js" asp-append-version="true"></script>
        @:</environment>
        @:<environment exclude="Development">
            @:<script src="~/js/models/@{@Model.ViewDataTypeShortName.ToLower()}.min.js" asp-append-version="true"></script>
        @:</environment>
        @:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
    @:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
    string GetPostfijo(string s)
    {
        string[] vocales = { "a", "e", "i", "o", "u" };

        if (vocales.Contains(s.Last().ToString()))
            return $"{s}s";
        else if (s.Last().ToString() == "s")
            return $"{s}";
        else
            return $"{s}es";


    }
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }
}
